{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyAussieBB","text":"<p>This is a very simple module for interacting with the Aussie Broadband APIs.</p> <p> </p>"},{"location":"#usage","title":"Usage","text":"<pre><code>pip install --user pyaussiebb\npython\n&gt;&gt;&gt; from aussiebb import AussieBB\n&gt;&gt;&gt; account = AussieBB(username, password)\n&gt;&gt;&gt; account.get_services()\n[{allyourservicedetails}]\n</code></pre> <p>For more, check out the docs.</p>"},{"location":"#asyncio-version","title":"AsyncIO version","text":"<p>You can replace <code>from aussiebb import AussieBB</code> with <code>from aussiebb.asyncio import AussieBB</code> and you'll get an <code>aiohttp</code>-powered version. The only difference in this case is that you have to explicitly call <code>login()</code> for reasons.</p> <p>If you hit the rate limit it'll raise a <code>RateLimit</code> exception. I haven't put that functionality into the blocking version yet, since ... that tends not to hit it. \ud83e\udd23</p>"},{"location":"#development","title":"Development","text":""},{"location":"#example-service-tests-ive-seen","title":"Example service tests I've seen","text":"<p>All the \"endpoints\" below should be tacked onto <code>aussiebb.const.BASEURL['api']</code>.</p> <p>Warning: <code>/nbn/{service_id}/connection</code> seems to have both a GET and POST method endpoint - tests on other endpoints may be similar.</p> <p>These can be run by using <code>AussieBB.run_test()</code> with the string after the last forward-slash as the \"test\" - ie, <code>connection</code> or <code>linestate</code>.</p>"},{"location":"#hfc","title":"HFC","text":"<p>These are entirely untested so far.</p> Endpoint Method Name Description <code>/nbn/{service_id}/connection</code> Probably GET Check Connection Check to see if your service is currently connected <code>/nbn/{service_id}/connection</code> Probably POST Kick Connection Kick your current session and force your device to reauthenticate <code>/tests/{service_id}/loopback</code> Probably POST Loopback Test This will test the connectivity between the point NBN\u2019s network transitions to ours and to the closest point to your property. Usually either the Network Termination Device or Node. <code>/tests/{service_id}/ntdstatus</code> Probably POST NTD Status An NTD Status will show you the operational state of the Network Termination Device (NTD). The test will also show if the NTD is detecting the wired connection from your router."},{"location":"#fttc","title":"FTTC","text":"Endpoint Method Name Description <code>/nbn/{service_id}/connection</code> GET Check Connection Check to see if your service is currently connected <code>/nbn/{service_id}/connection</code> Probably POST Kick Connection Kick your current session and force your device to reauthenticate <code>/tests/{service_id}/dpuportreset</code> Probably POST DPU Port Reset Reset the Port on the DPU (Distribution Point Unit) along with clearing any errors that maybe causing issues with connectivity. <code>/tests/{service_id}/dpuportstatus</code> POST DPU Port Status A DPU (Distribution Point Unit) port status will show if the NCD (Network Connection Device) is providing power to the DPU. It will also state if the NCD (Network Connection Device) is in sync. <code>/tests/{service_id}/dpustatus</code> POST DPU Status This will provide if the DPU (Distribution Point Unit) is currently being powered. <code>/tests/{service_id}/loopback</code> POST Loopback Test This will test the connectivity between the point NBN\u2019s network transitions to ours and to the closest point to your property. Usually either the Network Termination Device or Node. <code>/tests/{service_id}/ncdportreset</code> Probably POST NCD Port Reset Reset the gateway port on your NCD (Network Connection Device). <code>/tests/{service_id}/ncdreset</code> Probably POST NCD Reset This will remotely restart your Network Termination Device."},{"location":"#fttn","title":"FTTN","text":"Endpoint Method Name Description <code>/nbn/{service_id}/connection</code> GET Check Connection Check to see if your service is currently connected <code>/nbn/{service_id}/connection</code> Probably POST Kick Connection Kick your current session and force your device to reauthenticate <code>/tests/{service_id}/linestate</code> POST Line State A line state test will determine if you have \u201csync\u201d (connection) to the node. If the service is in sync this test will also return your maximum and current attainable transfer rate. <code>/tests/{service_id}/loopback</code> POST Loopback Test This will test the connectivity between the point NBN\u2019s network transitions to ours and to the closest point to your property. Usually either the Network Termination Device or Node. <code>/tests/{service_id}/portreset</code> Probably POST Port Reset This will reset the connection from the Node and also clear errors that may be causing issues with gaining sync. <code>/tests/{service_id}/stabilityprofile</code> Probably POST Stability Profile This will apply changes to your FTTN service including allowing increased noise to occur before making the connection unstable. This will cause your speeds to degrade as a result, but in turn making the service more stable. For NBN to investigate a fault this profile needs to be applied and a minimum of 5 dropouts recorded over a 24hr period on NBN's systems before a dropout fault can be raised"},{"location":"#fttp","title":"FTTP","text":"<p>These are as-yet untested.</p> Endpoint Method Name Description <code>/nbn/{service_id}/connection</code> Probably GET Check Connection Check to see if your service is currently connected <code>/nbn/{service_id}/connection</code> Probably POST Kick Connection Kick your current session and force your device to reauthenticate <code>/tests/{service_id}/loopback</code> Probably POST Loopback Test This will test the connectivity between the point NBN\u2019s network transitions to ours and to the closest point to your property. Usually either the Network Termination Device or Node. <code>/tests/{service_id}/portreset</code> Probably POST Port Reset This will reset the connection from the Node and also clear errors that may be causing issues with gaining sync. <code>/tests/{service_id}/unidstatus</code> Probably POST UNI-D Status UNI-D Status will show if the UNI-D port you are currently using has a router connected to it. This will also provide the Link speed your router and UNI-D port are connected at Eg, 100mbit or 1gbit. You will also see the MAC address of the currently connected router."},{"location":"#changelog","title":"Changelog","text":"<p>See CHANGELOG.md</p>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v0019","title":"v0.0.19","text":"<p>Updating aiohttp dependency for CVE-2023-37276</p>"},{"location":"CHANGELOG/#v0018","title":"v0.0.18","text":"<p>Added MFA support, example works with SMS, un-deprecated <code>service_plans</code>.</p>"},{"location":"CHANGELOG/#v0017","title":"v0.0.17","text":"<p>Adding download invoice functionality and handlers in <code>asyncio</code> module.</p>"},{"location":"CHANGELOG/#v0016","title":"v0.0.16","text":"<ul> <li>Deprecated <code>service_plans</code> as it requires MFA or another auth method.</li> <li><code>types.APIResponseMeta</code> now has optional <code>from</code> and <code>to</code> fields because the Aussie API was replying with them.</li> </ul>"},{"location":"CHANGELOG/#v0015","title":"v0.0.15","text":"<ul> <li>Moved the <code>pydantic</code> dependency from dev to main, which shouldn't ever have been in dev...</li> </ul>"},{"location":"CHANGELOG/#v0014","title":"v0.0.14","text":"<ul> <li>Moved the filtering by servicetypes in <code>get_services()</code> to its own function</li> <li>Added a new service type \"Fetchtv\"</li> <li>Added a way to drop types of services in <code>get_services()</code> so Home Assistant can ignore <code>FETCH_TYPES</code></li> <li>Added some handling for FETCHTV types.</li> </ul>"},{"location":"CHANGELOG/#v0013","title":"v0.0.13","text":"<ul> <li>Added service type of <code>FETCHTV</code> to <code>NBN_TYPES</code></li> <li>Fixed test for this handler.</li> <li>Updated logging for error when it happens.</li> </ul> <p>Turns out this was the wrong way to handle it, so this version got yanked.</p>"},{"location":"CHANGELOG/#v0012","title":"v0.0.12","text":"<ul> <li>Added <code>pydantic</code> as a dependency, which allows for better type checking.</li> <li>Rewrote a bunch of the tests because the bike shed needed to be green and driven by JSON.</li> <li>Added first run of handling for folks with more than 10 services - paginated calls</li> <li>Some things will return nicer pydantic-ish objects, typing is starting to be enforced on output</li> <li><code>account_contacts</code> is one, for example</li> <li>Added service type of <code>Opticomm</code> to <code>NBN_TYPES</code></li> </ul>"},{"location":"CHANGELOG/#v0011","title":"v0.0.11","text":"<ul> <li>Added <code>aussiebb.exceptions.UnrecognisedServiceType</code> and some quick validation when you run <code>get_usage</code> so it doesn't break.</li> <li>Added some more testing around this.</li> <li>Fixed it so you can pass a session object to the non-asyncio AussieBB</li> <li>Added \"use_cached\" to get_services calls</li> <li>Added some mock data in <code>aussiebb.const.TEST_MOCKDATA</code></li> </ul>"},{"location":"CHANGELOG/#v0010","title":"v0.0.10","text":""},{"location":"CHANGELOG/#major-change-minimum-supported-python-is-now-39","title":"Major change: Minimum supported Python is now 3.9","text":"<ul> <li>re-defined the API Classes as children of a base class (aussiebb.baseclass.BaseClass).</li> <li>added significantly better typing to inputs/responses.</li> <li>removed all the usage of <code>inspect</code>.</li> <li>moved from setup.py to Poetry for build/packaging.</li> <li>removed loguru dependency, class init now takes a logger as an option or uses python default logging if not. Also removed _debug_print from async version.</li> <li>added NBN_TYPES and PHONE_TYPES to aussiebb.const, to allow one to check if the service matches a known identifier for \"phone\" (mobile/VOIP) or \"NBN\" (internet) types - this matters when parsing the resulting service info.</li> <li>added test and fixed result of the asyncio get_service_tests function</li> </ul>"},{"location":"CHANGELOG/#v008","title":"v0.0.8","text":"<ul> <li>renamed serviceid to service_id to match the api</li> <li>added request_get_json to the sync class</li> <li>added telephony_usage</li> <li>added get_appointment which gets service appointments</li> <li>updated get_usage so it checks the service list and will return telephony data if it's a PhoneMobile service</li> <li>abstracted how URLS are generated so I don't have to keep adding them twice</li> <li>added a filter on get_services which allows you to filter by type</li> </ul>"},{"location":"CHANGELOG/#007","title":"0.0.7","text":"<ul> <li>Added the following new functions: <code>account_transactions</code>, <code>billing_invoice</code>, <code>service_outages</code>, <code>service_boltons</code>, <code>service_datablocks</code>, <code>support_tickets</code>, <code>account contacts</code>. Renamed <code>get_service_plans</code> to <code>service_plans</code></li> </ul>"},{"location":"CHANGELOG/#v006","title":"v0.0.6","text":"<ul> <li>Fixed rate limiting</li> </ul>"},{"location":"CHANGELOG/#v005","title":"v0.0.5","text":"<ul> <li>Fixing rate limiting</li> <li>Didn't actually fix it...</li> </ul>"},{"location":"CHANGELOG/#004","title":"0.0.4","text":"<ul> <li>Added <code>asyncio</code> submodule, split constants and exceptions out into their own files/modules.</li> </ul>"},{"location":"CHANGELOG/#003","title":"0.0.3","text":"<ul> <li>Added <code>get_service_plans</code> so the gigabit-desperate crowd can check for their new hotness.</li> </ul>"},{"location":"aussiebb/","title":"API Documentation","text":"<p>A class for interacting with Aussie Broadband APIs</p>"},{"location":"aussiebb/#aussiebb.AussieBB","title":"<code>AussieBB</code>","text":"<p>             Bases: <code>BaseClass</code></p> <p>A class for interacting with Aussie Broadband APIs</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>class AussieBB(BaseClass):\n\"\"\"A class for interacting with Aussie Broadband APIs\"\"\"\n\n    def __init__(\n        self,\n        username: str,\n        password: str,\n        debug: bool = False,\n        services_cache_time: int = 28800,\n        session: Optional[requests.sessions.Session] = None,\n    ):\n\"\"\"Setup function\n\n        ```\n        @param username: str - username for Aussie Broadband account\n        @param password: str - password for Aussie Broadband account\n        @param debug: bool - debug mode\n        @param services_cache_time: int\n            - seconds between caching get_services()\n            - defaults to 8 hours\n        @param session : requests.session - session object\n        ```\n        \"\"\"\n        super().__init__(username, password, debug, services_cache_time)\n        if session is None:\n            self.session = requests.Session()\n        else:\n            self.session = session\n\n    def login(self, depth: int = 0) -&gt; bool:\n\"\"\"Logs into the account and caches the cookie.\"\"\"\n        if depth &gt; 2:\n            raise RecursiveDepth(\"Login recursion depth &gt; 2\")\n        self.logger.debug(\"Logging in...\")\n\n        url = BASEURL[\"login\"]\n\n        payload = {\n            \"username\": self.username,\n            \"password\": self.password,\n        }\n        headers: Dict[str, Any] = dict(default_headers())\n\n        response = self.session.post(\n            url,\n            headers=headers,\n            json=payload,\n        )\n\n        response.raise_for_status()\n        jsondata = response.json()\n\n        return self._handle_login_response(\n            response.status_code, jsondata, response.cookies\n        )\n\n    def do_login_check(self, skip_login_check: bool) -&gt; None:\n\"\"\"checks if we're skipping the login check and logs in if necessary\"\"\"\n        if not skip_login_check:\n            self.logger.debug(\"skip_login_check false\")\n            if self._has_token_expired():\n                self.logger.debug(\"token has expired, logging in...\")\n                self.login()\n\n    def request_get(  # type: ignore\n        self,\n        url: str,\n        skip_login_check: bool = False,\n        cookies: Optional[Dict[str, Any]] = None,\n        params: Optional[Dict[str, Any]] = None,\n    ):\n\"\"\"Performs a GET request and logs in first if needed.\n\n        Returns the `requests.Response` object.\"\"\"\n        self.do_login_check(skip_login_check)\n        if cookies is None:\n            cookies = {\"myaussie_cookie\": self.myaussie_cookie}\n\n        response = self.session.get(url=url, cookies=cookies, params=params)\n        response.raise_for_status()\n        return response\n\n    def request_get_list(\n        self,\n        url: str,\n        skip_login_check: bool = False,\n        cookies: Optional[Dict[str, Any]] = None,\n        params: Optional[Dict[str, Any]] = None,\n    ) -&gt; List[Any]:\n\"\"\"Performs a GET request and logs in first if needed.\n\n        Returns a list from the response.\n        \"\"\"\n        self.do_login_check(skip_login_check)\n        response = self.session.get(url=url, cookies=cookies, params=params)\n        response.raise_for_status()\n        result: List[Any] = response.json()\n        return result\n\n    def request_get_json(\n        self,\n        url: str,\n        skip_login_check: bool = False,\n        cookies: Optional[Dict[str, Any]] = None,\n        params: Optional[Dict[str, Any]] = None,\n    ) -&gt; Dict[str, Any]:\n\"\"\"Performs a GET request and logs in first if needed.\n\n        Returns a dict of the JSON response.\n        \"\"\"\n        self.do_login_check(skip_login_check)\n        response = self.session.get(url=url, cookies=cookies, params=params)\n        response.raise_for_status()\n        result: Dict[str, Any] = response.json()\n        return result\n\n    def request_post(\n        self, url: str, skip_login_check: bool = False, **kwargs: Dict[str, Any]\n    ) -&gt; requests.Response:\n\"\"\"Performs a POST request and logs in first if needed.\"\"\"\n        self.do_login_check(skip_login_check)\n        if \"cookies\" not in kwargs:\n            kwargs[\"cookies\"] = {\"myaussie_cookie\": self.myaussie_cookie}\n\n        if \"headers\" in kwargs:\n            headers: Dict[str, Any] = kwargs[\"headers\"]\n        else:\n            headers = dict(default_headers())\n\n        response = self.session.post(\n            url=url,\n            headers=headers,\n            **kwargs,  # type: ignore\n        )\n        response.raise_for_status()\n        return response\n\n    def get_customer_details(self) -&gt; Dict[str, Any]:\n\"\"\"Grabs the customer details.\n\n        Returns a dict\"\"\"\n        url = self.get_url(\"get_customer_details\")\n        querystring = {\"v\": \"2\"}\n        responsedata = self.request_get_json(\n            url=url,\n            params=querystring,\n        )\n        return responsedata\n\n    @property\n    def referral_code(self) -&gt; int:\n\"\"\"returns the referral code, which is just the customer number\"\"\"\n        response = self.get_customer_details()\n        if \"customer_number\" not in response:\n            raise ValueError(\"Couldn't get customer_number from customer_details call.\")\n        return int(response[\"customer_number\"])\n\n    def _check_reload_cached_services(self) -&gt; bool:\n\"\"\"If the age of the service data caching is too old, clear it and re-poll.\n\n        Returns bool - if it reloaded the cache.\n        \"\"\"\n        if not self.services:\n            self.get_services(use_cached=False)\n            return True\n\n        cache_expiry = self.services_last_update + self.services_cache_time\n        if time() &gt;= cache_expiry:\n            self.get_services(use_cached=False)\n            return True\n        return False\n\n    def get_services(\n        self,\n        page: int = 1,\n        use_cached: bool = False,\n        servicetypes: Optional[List[str]] = None,\n        drop_types: Optional[List[str]] = None,\n    ) -&gt; Optional[List[Dict[str, Any]]]:\n\"\"\"Returns a `list` of `dicts` of services associated with the account.\n\n        If you want a specific kind of service, or services,\n        provide a list of matching strings in servicetypes.\n\n        If you want to use cached data, call it with `use_cached=True`\n        \"\"\"\n        if use_cached:\n            self.logger.debug(\"Using cached data for get_services.\")\n            self._check_reload_cached_services()\n        else:\n            url = self.get_url(\"get_services\")\n            services_list: List[Dict[str, Any]] = []\n            while True:\n                params = {\"page\": page}\n                responsedata = self.request_get_json(url=url, params=params)\n                servicedata = GetServicesResponse.parse_obj(responsedata)\n\n                for service in servicedata.data:\n                    services_list.append(service)\n\n                if servicedata.links.next is None:\n                    break\n                url = servicedata.links.next\n                page = servicedata.meta[\"current_page\"]\n\n            self.services = services_list\n            self.services_last_update = int(time())\n\n        self.services = self.filter_services(\n            service_types=servicetypes,\n            drop_types=drop_types,\n        )\n\n        return self.services\n\n    def account_transactions(self) -&gt; Dict[str, AccountTransaction]:\n\"\"\"Pulls the data for transactions on your account.\n\n        Returns a dict where the key is the month and year of the transaction.\n\n        Keys: `['id', 'type', 'time', 'description', 'amountCents', 'runningBalanceCents']`\n\n        Example output:\n\n        ``` json\n        \"August 2021\": [\n          {\n                \"id\": 12345,\n                \"type\": \"receipt\",\n                \"time\": \"2021-08-06\",\n                \"description\": \"Payment #12345\",\n                \"amountCents\": -8400,\n                \"runningBalanceCents\": 0\n            }\n        ],\n        ```\n        \"\"\"\n        url = self.get_url(\"account_transactions\")\n        responsedata = self.request_get_json(url=url)\n\n        result: Dict[str, AccountTransaction] = responsedata\n        return result\n\n    def billing_invoice(self, invoice_id: int) -&gt; Dict[str, Any]:\n\"\"\"Downloads an invoice\n\n        This returns the bare response object, parsing the result is an exercise for the consumer. It's a PDF file.\n        \"\"\"\n        url = self.get_url(\"billing_invoice\", {\"invoice_id\": invoice_id})\n        result = self.request_get_json(url=url)\n\n        return result\n\n    def account_paymentplans(self) -&gt; Dict[str, Any]:\n\"\"\"Returns a dict of payment plans for an account\"\"\"\n        url = self.get_url(\"account_paymentplans\")\n        return self.request_get_json(url=url)\n\n    def get_usage(self, service_id: int, use_cached: bool = True) -&gt; Dict[str, Any]:\n\"\"\"\n        Returns a dict of usage for a service.\n\n        If it's a telephony service (`type=PhoneMobile`) it'll pull from the telephony endpoint.\n\n        \"\"\"\n        if self.services is None:\n            self.get_services(use_cached=use_cached)\n\n        if self.services is not None:\n            for service in self.services:\n                if service_id == service[\"service_id\"]:\n                    # throw an error if we're trying to parse something we can't\n                    self.validate_service_type(service)\n                    if service[\"type\"] in PHONE_TYPES:\n                        return self.telephony_usage(service_id)\n            url = self.get_url(\"get_usage\", {\"service_id\": service_id})\n            result = self.request_get_json(url=url)\n\n            return result\n        return {}\n\n    def get_service_tests(self, service_id: int) -&gt; List[ServiceTest]:\n\"\"\"Gets the available tests for a given service ID\n        Returns list of dicts\n\n        Example data:\n\n        ```\n        [{\n            'name' : str(),\n            'description' : str',\n            'link' : str(a url to the test)\n        },]\n        ```\n\n        This has a habit of throwing 400 errors if you query a VOIP service...\n        \"\"\"\n        url = self.get_url(\"get_service_tests\", {\"service_id\": service_id})\n        results: List[ServiceTest] = [\n            ServiceTest.parse_obj(test) for test in self.request_get_list(url=url)\n        ]\n        return results\n\n    def get_test_history(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Gets the available tests for a given service ID\n\n        Returns a list of dicts with tests which have been run\n        \"\"\"\n        url = self.get_url(\"get_test_history\", {\"service_id\": service_id})\n        return self.request_get_json(url=url)\n\n    def test_line_state(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Tests the line state for a given service ID\"\"\"\n        tests = self.get_service_tests(service_id)\n        url = self.get_url(\"test_line_state\", {\"service_id\": service_id})\n\n        self.is_valid_test(url, tests)\n\n        self.logger.debug(\"Testing line state, can take a few seconds...\")\n        response = self.request_post(url=url)\n        result: Dict[str, Any] = response.json()\n        return result\n\n    def run_test(\n        self, service_id: int, test_name: str, test_method: str = \"post\"\n    ) -&gt; Optional[Dict[str, Any]]:\n\"\"\"Run a test, but it checks it's valid first\n\n        There doesn't seem to be a valid way to identify what method you're supposed to use on each test.\n\n        See the README for more analysis\n\n        - 'status' of 'InProgress' use 'AussieBB.get_test_history()' and look for the 'id'\n        - 'status' of 'Completed' means you've got the full response\n        \"\"\"\n\n        test_links = [\n            test\n            for test in self.get_service_tests(service_id)\n            if test.link.endswith(f\"/{test_name}\")\n        ]\n\n        if not test_links:\n            return None\n        if len(test_links) != 1:\n            self.logger.debug(\"Too many tests? %s\", test_links)\n\n        test_name = test_links[0].name\n        self.logger.debug(\"Running %s\", test_name)\n        if test_method == \"get\":\n            return self.request_get_json(url=test_links[0].link)\n        result: Dict[str, Any] = self.request_post(url=test_links[0].link).json()\n        return result\n\n    def service_plans(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"\n        Pulls the plan data for a given service. You MUST MFA-verify first.\n\n        Keys: `['current', 'pending', 'available', 'filters', 'typicalEveningSpeeds']`\n\n        \"\"\"\n        url = self.get_url(\"service_plans\", {\"service_id\": service_id})\n        return self.request_get_json(url=url)\n\n    def service_outages(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls outages associated with a service.\n\n        Keys: `['networkEvents', 'aussieOutages', 'currentNbnOutages', 'scheduledNbnOutages', 'resolvedScheduledNbnOutages', 'resolvedNbnOutages']`\n\n        ```\n        \"\"\"\n        url = self.get_url(\"service_outages\", {\"service_id\": service_id})\n        result = AussieBBOutage.parse_obj(self.request_get_json(url=url))\n        return result.dict()\n\n    def service_boltons(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls addons associated with the service.\n\n        Keys: `['id', 'name', 'description', 'costCents', 'additionalNote', 'active']`\n\n        Example data:\n\n        ```\n        [{\n            \"id\": 4,\n            \"name\": \"Small Change Big Change Donation\",\n            \"description\": \"Charitable donation to the Small Change Big Change program, part of the Telco Together Foundation, which helps build resilient young Australians\",\n            \"costCents\": 100,\n            \"additionalNote\": null,\n            \"active\": false\n        }]\n        ```\n        \"\"\"\n        url = self.get_url(\"service_boltons\", {\"service_id\": service_id})\n        return self.request_get_json(url=url)\n\n    def service_datablocks(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls datablocks associated with the service.\n\n        Keys: `['current', 'available']`\n\n        Example data:\n\n        ```\n        {\n            \"current\": [],\n            \"available\": []\n        }\n        ```\n        \"\"\"\n        url = self.get_url(\"service_datablocks\", {\"service_id\": service_id})\n        return self.request_get_json(url=url)\n\n    def telephony_usage(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls the telephony usage associated with the service.\n\n        Keys: `['national', 'mobile', 'international', 'sms', 'internet', 'voicemail', 'other', 'daysTotal', 'daysRemaining', 'historical']`\n\n        Example data:\n\n        ```\n        {\"national\":{\"calls\":0,\"cost\":0},\"mobile\":{\"calls\":0,\"cost\":0},\n        \"international\":{\"calls\":0,\"cost\":0},\"sms\":{\"calls\":0,\"cost\":0},\n        \"internet\":{\"kbytes\":0,\"cost\":0},\n        \"voicemail\":{\"calls\":0,\"cost\":0},\"other\":{\"calls\":0,\"cost\":0},\n        \"daysTotal\":31,\"daysRemaining\":2,\"historical\":[]}\n        ```\n        \"\"\"\n        url = self.get_url(\"telephony_usage\", {\"service_id\": service_id})\n        return self.request_get_json(url=url)\n\n    def support_tickets(self) -&gt; Dict[str, Any]:\n\"\"\"Pulls the support tickets associated with the account, returns a list of dicts.\n\n        Dict keys: `['ref', 'create', 'updated', 'service_id', 'type', 'subject', 'status', 'closed', 'awaiting_customer_reply', 'expected_response_minutes']`\n\n        \"\"\"\n        url = self.get_url(\"support_tickets\")\n        return self.request_get_json(url=url)\n\n    def get_appointment(self, ticketid: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls the support tickets associated with the account, returns a list of dicts.\n\n        Dict keys: `['ref', 'create', 'updated', 'service_id', 'type', 'subject', 'status', 'closed', 'awaiting_customer_reply', 'expected_response_minutes']`\n        \"\"\"\n        url = self.get_url(\"get_appointment\", {\"ticketid\": ticketid})\n        return self.request_get_json(url=url)\n\n    def account_contacts(self) -&gt; List[AccountContact]:\n\"\"\"Pulls the contacts with the account, returns a list of dicts\n\n        Dict keys: `['id', 'first_name', 'last_name', 'email', 'dob', 'home_phone', 'work_phone', 'mobile_phone', 'work_mobile', 'primary_contact']`\n        \"\"\"\n        url = self.get_url(\"account_contacts\")\n        response = self.request_get_json(url=url)\n        return [AccountContact.parse_obj(contact) for contact in response]\n\n    # TODO: type get_orders\n    def get_orders(self) -&gt; Dict[str, Any]:\n\"\"\"pulls the outstanding orders for an account\"\"\"\n        url = self.get_url(\"get_orders\")\n        responsedata = self.request_get_json(url=url)\n\n        result = OrderResponse(**responsedata)\n        return result.dict()\n\n    def get_order(self, order_id: int) -&gt; OrderDetailResponse:\n\"\"\"gets a specific order\"\"\"\n        url = self.get_url(\"get_order\", {\"order_id\": order_id})\n        responsedata = self.request_get_json(url=url)\n        result = cast(\n            OrderDetailResponse,\n            OrderDetailResponseModel.parse_obj(responsedata).dict(),\n        )\n        return result\n\n    def get_voip_devices(self, service_id: int) -&gt; List[VOIPDevice]:\n\"\"\"gets the devices associatd with a VOIP service\"\"\"\n        url = self.get_url(\"voip_devices\", {\"service_id\": service_id})\n        service_list: List[VOIPDevice] = []\n        for service in self.request_get_json(url=url):\n            service_list.append(VOIPDevice.parse_obj(service))\n        return service_list\n\n    def get_voip_service(self, service_id: int) -&gt; VOIPDetails:\n\"\"\"gets the details of a VOIP service\"\"\"\n        url = self.get_url(\"voip_service\", {\"service_id\": service_id})\n        return VOIPDetails.parse_obj(self.request_get_json(url=url))\n\n    def get_fetch_service(self, service_id: int) -&gt; FetchService:\n\"\"\"gets the details of a Fetch service\"\"\"\n        url = self.get_url(\"fetch_service\", {\"service_id\": service_id})\n        return FetchService.parse_obj(self.request_get_json(url=url))\n\n    async def mfa_send(self, method: MFAMethod) -&gt; None:\n\"\"\"sends an MFA code to the user\"\"\"\n        url = self.get_url(\"mfa_send\")\n        print(method.dict())\n        self.request_post(url=url, data=method.dict())\n\n    async def mfa_verify(self, token: str) -&gt; None:\n\"\"\"got the token from send_mfa? send it back to validate it\"\"\"\n        url = self.get_url(\"mfa_verify\")\n        self.request_post(url=url, data={\"token\": token})\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.referral_code","title":"<code>referral_code: int</code>  <code>property</code>","text":"<p>returns the referral code, which is just the customer number</p>"},{"location":"aussiebb/#aussiebb.AussieBB.__init__","title":"<code>__init__(username, password, debug=False, services_cache_time=28800, session=None)</code>","text":"<p>Setup function</p> <pre><code>@param username: str - username for Aussie Broadband account\n@param password: str - password for Aussie Broadband account\n@param debug: bool - debug mode\n@param services_cache_time: int\n    - seconds between caching get_services()\n    - defaults to 8 hours\n@param session : requests.session - session object\n</code></pre> Source code in <code>aussiebb/__init__.py</code> <pre><code>def __init__(\n    self,\n    username: str,\n    password: str,\n    debug: bool = False,\n    services_cache_time: int = 28800,\n    session: Optional[requests.sessions.Session] = None,\n):\n\"\"\"Setup function\n\n    ```\n    @param username: str - username for Aussie Broadband account\n    @param password: str - password for Aussie Broadband account\n    @param debug: bool - debug mode\n    @param services_cache_time: int\n        - seconds between caching get_services()\n        - defaults to 8 hours\n    @param session : requests.session - session object\n    ```\n    \"\"\"\n    super().__init__(username, password, debug, services_cache_time)\n    if session is None:\n        self.session = requests.Session()\n    else:\n        self.session = session\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.account_contacts","title":"<code>account_contacts()</code>","text":"<p>Pulls the contacts with the account, returns a list of dicts</p> <p>Dict keys: <code>['id', 'first_name', 'last_name', 'email', 'dob', 'home_phone', 'work_phone', 'mobile_phone', 'work_mobile', 'primary_contact']</code></p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def account_contacts(self) -&gt; List[AccountContact]:\n\"\"\"Pulls the contacts with the account, returns a list of dicts\n\n    Dict keys: `['id', 'first_name', 'last_name', 'email', 'dob', 'home_phone', 'work_phone', 'mobile_phone', 'work_mobile', 'primary_contact']`\n    \"\"\"\n    url = self.get_url(\"account_contacts\")\n    response = self.request_get_json(url=url)\n    return [AccountContact.parse_obj(contact) for contact in response]\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.account_paymentplans","title":"<code>account_paymentplans()</code>","text":"<p>Returns a dict of payment plans for an account</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def account_paymentplans(self) -&gt; Dict[str, Any]:\n\"\"\"Returns a dict of payment plans for an account\"\"\"\n    url = self.get_url(\"account_paymentplans\")\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.account_transactions","title":"<code>account_transactions()</code>","text":"<p>Pulls the data for transactions on your account.</p> <p>Returns a dict where the key is the month and year of the transaction.</p> <p>Keys: <code>['id', 'type', 'time', 'description', 'amountCents', 'runningBalanceCents']</code></p> <p>Example output:</p> <pre><code>\"August 2021\": [\n  {\n        \"id\": 12345,\n        \"type\": \"receipt\",\n        \"time\": \"2021-08-06\",\n        \"description\": \"Payment #12345\",\n        \"amountCents\": -8400,\n        \"runningBalanceCents\": 0\n    }\n],\n</code></pre> Source code in <code>aussiebb/__init__.py</code> <pre><code>def account_transactions(self) -&gt; Dict[str, AccountTransaction]:\n\"\"\"Pulls the data for transactions on your account.\n\n    Returns a dict where the key is the month and year of the transaction.\n\n    Keys: `['id', 'type', 'time', 'description', 'amountCents', 'runningBalanceCents']`\n\n    Example output:\n\n    ``` json\n    \"August 2021\": [\n      {\n            \"id\": 12345,\n            \"type\": \"receipt\",\n            \"time\": \"2021-08-06\",\n            \"description\": \"Payment #12345\",\n            \"amountCents\": -8400,\n            \"runningBalanceCents\": 0\n        }\n    ],\n    ```\n    \"\"\"\n    url = self.get_url(\"account_transactions\")\n    responsedata = self.request_get_json(url=url)\n\n    result: Dict[str, AccountTransaction] = responsedata\n    return result\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.billing_invoice","title":"<code>billing_invoice(invoice_id)</code>","text":"<p>Downloads an invoice</p> <p>This returns the bare response object, parsing the result is an exercise for the consumer. It's a PDF file.</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def billing_invoice(self, invoice_id: int) -&gt; Dict[str, Any]:\n\"\"\"Downloads an invoice\n\n    This returns the bare response object, parsing the result is an exercise for the consumer. It's a PDF file.\n    \"\"\"\n    url = self.get_url(\"billing_invoice\", {\"invoice_id\": invoice_id})\n    result = self.request_get_json(url=url)\n\n    return result\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.do_login_check","title":"<code>do_login_check(skip_login_check)</code>","text":"<p>checks if we're skipping the login check and logs in if necessary</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def do_login_check(self, skip_login_check: bool) -&gt; None:\n\"\"\"checks if we're skipping the login check and logs in if necessary\"\"\"\n    if not skip_login_check:\n        self.logger.debug(\"skip_login_check false\")\n        if self._has_token_expired():\n            self.logger.debug(\"token has expired, logging in...\")\n            self.login()\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_appointment","title":"<code>get_appointment(ticketid)</code>","text":"<p>Pulls the support tickets associated with the account, returns a list of dicts.</p> <p>Dict keys: <code>['ref', 'create', 'updated', 'service_id', 'type', 'subject', 'status', 'closed', 'awaiting_customer_reply', 'expected_response_minutes']</code></p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_appointment(self, ticketid: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls the support tickets associated with the account, returns a list of dicts.\n\n    Dict keys: `['ref', 'create', 'updated', 'service_id', 'type', 'subject', 'status', 'closed', 'awaiting_customer_reply', 'expected_response_minutes']`\n    \"\"\"\n    url = self.get_url(\"get_appointment\", {\"ticketid\": ticketid})\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_customer_details","title":"<code>get_customer_details()</code>","text":"<p>Grabs the customer details.</p> <p>Returns a dict</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_customer_details(self) -&gt; Dict[str, Any]:\n\"\"\"Grabs the customer details.\n\n    Returns a dict\"\"\"\n    url = self.get_url(\"get_customer_details\")\n    querystring = {\"v\": \"2\"}\n    responsedata = self.request_get_json(\n        url=url,\n        params=querystring,\n    )\n    return responsedata\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_fetch_service","title":"<code>get_fetch_service(service_id)</code>","text":"<p>gets the details of a Fetch service</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_fetch_service(self, service_id: int) -&gt; FetchService:\n\"\"\"gets the details of a Fetch service\"\"\"\n    url = self.get_url(\"fetch_service\", {\"service_id\": service_id})\n    return FetchService.parse_obj(self.request_get_json(url=url))\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_order","title":"<code>get_order(order_id)</code>","text":"<p>gets a specific order</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_order(self, order_id: int) -&gt; OrderDetailResponse:\n\"\"\"gets a specific order\"\"\"\n    url = self.get_url(\"get_order\", {\"order_id\": order_id})\n    responsedata = self.request_get_json(url=url)\n    result = cast(\n        OrderDetailResponse,\n        OrderDetailResponseModel.parse_obj(responsedata).dict(),\n    )\n    return result\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_orders","title":"<code>get_orders()</code>","text":"<p>pulls the outstanding orders for an account</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_orders(self) -&gt; Dict[str, Any]:\n\"\"\"pulls the outstanding orders for an account\"\"\"\n    url = self.get_url(\"get_orders\")\n    responsedata = self.request_get_json(url=url)\n\n    result = OrderResponse(**responsedata)\n    return result.dict()\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_service_tests","title":"<code>get_service_tests(service_id)</code>","text":"<p>Gets the available tests for a given service ID Returns list of dicts</p> <p>Example data:</p> <pre><code>[{\n    'name' : str(),\n    'description' : str',\n    'link' : str(a url to the test)\n},]\n</code></pre> <p>This has a habit of throwing 400 errors if you query a VOIP service...</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_service_tests(self, service_id: int) -&gt; List[ServiceTest]:\n\"\"\"Gets the available tests for a given service ID\n    Returns list of dicts\n\n    Example data:\n\n    ```\n    [{\n        'name' : str(),\n        'description' : str',\n        'link' : str(a url to the test)\n    },]\n    ```\n\n    This has a habit of throwing 400 errors if you query a VOIP service...\n    \"\"\"\n    url = self.get_url(\"get_service_tests\", {\"service_id\": service_id})\n    results: List[ServiceTest] = [\n        ServiceTest.parse_obj(test) for test in self.request_get_list(url=url)\n    ]\n    return results\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_services","title":"<code>get_services(page=1, use_cached=False, servicetypes=None, drop_types=None)</code>","text":"<p>Returns a <code>list</code> of <code>dicts</code> of services associated with the account.</p> <p>If you want a specific kind of service, or services, provide a list of matching strings in servicetypes.</p> <p>If you want to use cached data, call it with <code>use_cached=True</code></p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_services(\n    self,\n    page: int = 1,\n    use_cached: bool = False,\n    servicetypes: Optional[List[str]] = None,\n    drop_types: Optional[List[str]] = None,\n) -&gt; Optional[List[Dict[str, Any]]]:\n\"\"\"Returns a `list` of `dicts` of services associated with the account.\n\n    If you want a specific kind of service, or services,\n    provide a list of matching strings in servicetypes.\n\n    If you want to use cached data, call it with `use_cached=True`\n    \"\"\"\n    if use_cached:\n        self.logger.debug(\"Using cached data for get_services.\")\n        self._check_reload_cached_services()\n    else:\n        url = self.get_url(\"get_services\")\n        services_list: List[Dict[str, Any]] = []\n        while True:\n            params = {\"page\": page}\n            responsedata = self.request_get_json(url=url, params=params)\n            servicedata = GetServicesResponse.parse_obj(responsedata)\n\n            for service in servicedata.data:\n                services_list.append(service)\n\n            if servicedata.links.next is None:\n                break\n            url = servicedata.links.next\n            page = servicedata.meta[\"current_page\"]\n\n        self.services = services_list\n        self.services_last_update = int(time())\n\n    self.services = self.filter_services(\n        service_types=servicetypes,\n        drop_types=drop_types,\n    )\n\n    return self.services\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_test_history","title":"<code>get_test_history(service_id)</code>","text":"<p>Gets the available tests for a given service ID</p> <p>Returns a list of dicts with tests which have been run</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_test_history(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Gets the available tests for a given service ID\n\n    Returns a list of dicts with tests which have been run\n    \"\"\"\n    url = self.get_url(\"get_test_history\", {\"service_id\": service_id})\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_usage","title":"<code>get_usage(service_id, use_cached=True)</code>","text":"<p>Returns a dict of usage for a service.</p> <p>If it's a telephony service (<code>type=PhoneMobile</code>) it'll pull from the telephony endpoint.</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_usage(self, service_id: int, use_cached: bool = True) -&gt; Dict[str, Any]:\n\"\"\"\n    Returns a dict of usage for a service.\n\n    If it's a telephony service (`type=PhoneMobile`) it'll pull from the telephony endpoint.\n\n    \"\"\"\n    if self.services is None:\n        self.get_services(use_cached=use_cached)\n\n    if self.services is not None:\n        for service in self.services:\n            if service_id == service[\"service_id\"]:\n                # throw an error if we're trying to parse something we can't\n                self.validate_service_type(service)\n                if service[\"type\"] in PHONE_TYPES:\n                    return self.telephony_usage(service_id)\n        url = self.get_url(\"get_usage\", {\"service_id\": service_id})\n        result = self.request_get_json(url=url)\n\n        return result\n    return {}\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_voip_devices","title":"<code>get_voip_devices(service_id)</code>","text":"<p>gets the devices associatd with a VOIP service</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_voip_devices(self, service_id: int) -&gt; List[VOIPDevice]:\n\"\"\"gets the devices associatd with a VOIP service\"\"\"\n    url = self.get_url(\"voip_devices\", {\"service_id\": service_id})\n    service_list: List[VOIPDevice] = []\n    for service in self.request_get_json(url=url):\n        service_list.append(VOIPDevice.parse_obj(service))\n    return service_list\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.get_voip_service","title":"<code>get_voip_service(service_id)</code>","text":"<p>gets the details of a VOIP service</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def get_voip_service(self, service_id: int) -&gt; VOIPDetails:\n\"\"\"gets the details of a VOIP service\"\"\"\n    url = self.get_url(\"voip_service\", {\"service_id\": service_id})\n    return VOIPDetails.parse_obj(self.request_get_json(url=url))\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.login","title":"<code>login(depth=0)</code>","text":"<p>Logs into the account and caches the cookie.</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def login(self, depth: int = 0) -&gt; bool:\n\"\"\"Logs into the account and caches the cookie.\"\"\"\n    if depth &gt; 2:\n        raise RecursiveDepth(\"Login recursion depth &gt; 2\")\n    self.logger.debug(\"Logging in...\")\n\n    url = BASEURL[\"login\"]\n\n    payload = {\n        \"username\": self.username,\n        \"password\": self.password,\n    }\n    headers: Dict[str, Any] = dict(default_headers())\n\n    response = self.session.post(\n        url,\n        headers=headers,\n        json=payload,\n    )\n\n    response.raise_for_status()\n    jsondata = response.json()\n\n    return self._handle_login_response(\n        response.status_code, jsondata, response.cookies\n    )\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.mfa_send","title":"<code>mfa_send(method)</code>  <code>async</code>","text":"<p>sends an MFA code to the user</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>async def mfa_send(self, method: MFAMethod) -&gt; None:\n\"\"\"sends an MFA code to the user\"\"\"\n    url = self.get_url(\"mfa_send\")\n    print(method.dict())\n    self.request_post(url=url, data=method.dict())\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.mfa_verify","title":"<code>mfa_verify(token)</code>  <code>async</code>","text":"<p>got the token from send_mfa? send it back to validate it</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>async def mfa_verify(self, token: str) -&gt; None:\n\"\"\"got the token from send_mfa? send it back to validate it\"\"\"\n    url = self.get_url(\"mfa_verify\")\n    self.request_post(url=url, data={\"token\": token})\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.request_get","title":"<code>request_get(url, skip_login_check=False, cookies=None, params=None)</code>","text":"<p>Performs a GET request and logs in first if needed.</p> <p>Returns the <code>requests.Response</code> object.</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def request_get(  # type: ignore\n    self,\n    url: str,\n    skip_login_check: bool = False,\n    cookies: Optional[Dict[str, Any]] = None,\n    params: Optional[Dict[str, Any]] = None,\n):\n\"\"\"Performs a GET request and logs in first if needed.\n\n    Returns the `requests.Response` object.\"\"\"\n    self.do_login_check(skip_login_check)\n    if cookies is None:\n        cookies = {\"myaussie_cookie\": self.myaussie_cookie}\n\n    response = self.session.get(url=url, cookies=cookies, params=params)\n    response.raise_for_status()\n    return response\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.request_get_json","title":"<code>request_get_json(url, skip_login_check=False, cookies=None, params=None)</code>","text":"<p>Performs a GET request and logs in first if needed.</p> <p>Returns a dict of the JSON response.</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def request_get_json(\n    self,\n    url: str,\n    skip_login_check: bool = False,\n    cookies: Optional[Dict[str, Any]] = None,\n    params: Optional[Dict[str, Any]] = None,\n) -&gt; Dict[str, Any]:\n\"\"\"Performs a GET request and logs in first if needed.\n\n    Returns a dict of the JSON response.\n    \"\"\"\n    self.do_login_check(skip_login_check)\n    response = self.session.get(url=url, cookies=cookies, params=params)\n    response.raise_for_status()\n    result: Dict[str, Any] = response.json()\n    return result\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.request_get_list","title":"<code>request_get_list(url, skip_login_check=False, cookies=None, params=None)</code>","text":"<p>Performs a GET request and logs in first if needed.</p> <p>Returns a list from the response.</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def request_get_list(\n    self,\n    url: str,\n    skip_login_check: bool = False,\n    cookies: Optional[Dict[str, Any]] = None,\n    params: Optional[Dict[str, Any]] = None,\n) -&gt; List[Any]:\n\"\"\"Performs a GET request and logs in first if needed.\n\n    Returns a list from the response.\n    \"\"\"\n    self.do_login_check(skip_login_check)\n    response = self.session.get(url=url, cookies=cookies, params=params)\n    response.raise_for_status()\n    result: List[Any] = response.json()\n    return result\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.request_post","title":"<code>request_post(url, skip_login_check=False, **kwargs)</code>","text":"<p>Performs a POST request and logs in first if needed.</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def request_post(\n    self, url: str, skip_login_check: bool = False, **kwargs: Dict[str, Any]\n) -&gt; requests.Response:\n\"\"\"Performs a POST request and logs in first if needed.\"\"\"\n    self.do_login_check(skip_login_check)\n    if \"cookies\" not in kwargs:\n        kwargs[\"cookies\"] = {\"myaussie_cookie\": self.myaussie_cookie}\n\n    if \"headers\" in kwargs:\n        headers: Dict[str, Any] = kwargs[\"headers\"]\n    else:\n        headers = dict(default_headers())\n\n    response = self.session.post(\n        url=url,\n        headers=headers,\n        **kwargs,  # type: ignore\n    )\n    response.raise_for_status()\n    return response\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.run_test","title":"<code>run_test(service_id, test_name, test_method='post')</code>","text":"<p>Run a test, but it checks it's valid first</p> <p>There doesn't seem to be a valid way to identify what method you're supposed to use on each test.</p> <p>See the README for more analysis</p> <ul> <li>'status' of 'InProgress' use 'AussieBB.get_test_history()' and look for the 'id'</li> <li>'status' of 'Completed' means you've got the full response</li> </ul> Source code in <code>aussiebb/__init__.py</code> <pre><code>def run_test(\n    self, service_id: int, test_name: str, test_method: str = \"post\"\n) -&gt; Optional[Dict[str, Any]]:\n\"\"\"Run a test, but it checks it's valid first\n\n    There doesn't seem to be a valid way to identify what method you're supposed to use on each test.\n\n    See the README for more analysis\n\n    - 'status' of 'InProgress' use 'AussieBB.get_test_history()' and look for the 'id'\n    - 'status' of 'Completed' means you've got the full response\n    \"\"\"\n\n    test_links = [\n        test\n        for test in self.get_service_tests(service_id)\n        if test.link.endswith(f\"/{test_name}\")\n    ]\n\n    if not test_links:\n        return None\n    if len(test_links) != 1:\n        self.logger.debug(\"Too many tests? %s\", test_links)\n\n    test_name = test_links[0].name\n    self.logger.debug(\"Running %s\", test_name)\n    if test_method == \"get\":\n        return self.request_get_json(url=test_links[0].link)\n    result: Dict[str, Any] = self.request_post(url=test_links[0].link).json()\n    return result\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.service_boltons","title":"<code>service_boltons(service_id)</code>","text":"<p>Pulls addons associated with the service.</p> <p>Keys: <code>['id', 'name', 'description', 'costCents', 'additionalNote', 'active']</code></p> <p>Example data:</p> <pre><code>[{\n    \"id\": 4,\n    \"name\": \"Small Change Big Change Donation\",\n    \"description\": \"Charitable donation to the Small Change Big Change program, part of the Telco Together Foundation, which helps build resilient young Australians\",\n    \"costCents\": 100,\n    \"additionalNote\": null,\n    \"active\": false\n}]\n</code></pre> Source code in <code>aussiebb/__init__.py</code> <pre><code>def service_boltons(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls addons associated with the service.\n\n    Keys: `['id', 'name', 'description', 'costCents', 'additionalNote', 'active']`\n\n    Example data:\n\n    ```\n    [{\n        \"id\": 4,\n        \"name\": \"Small Change Big Change Donation\",\n        \"description\": \"Charitable donation to the Small Change Big Change program, part of the Telco Together Foundation, which helps build resilient young Australians\",\n        \"costCents\": 100,\n        \"additionalNote\": null,\n        \"active\": false\n    }]\n    ```\n    \"\"\"\n    url = self.get_url(\"service_boltons\", {\"service_id\": service_id})\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.service_datablocks","title":"<code>service_datablocks(service_id)</code>","text":"<p>Pulls datablocks associated with the service.</p> <p>Keys: <code>['current', 'available']</code></p> <p>Example data:</p> <pre><code>{\n    \"current\": [],\n    \"available\": []\n}\n</code></pre> Source code in <code>aussiebb/__init__.py</code> <pre><code>def service_datablocks(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls datablocks associated with the service.\n\n    Keys: `['current', 'available']`\n\n    Example data:\n\n    ```\n    {\n        \"current\": [],\n        \"available\": []\n    }\n    ```\n    \"\"\"\n    url = self.get_url(\"service_datablocks\", {\"service_id\": service_id})\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.service_outages","title":"<code>service_outages(service_id)</code>","text":"<p>Pulls outages associated with a service.</p> <p>Keys: <code>['networkEvents', 'aussieOutages', 'currentNbnOutages', 'scheduledNbnOutages', 'resolvedScheduledNbnOutages', 'resolvedNbnOutages']</code></p> <p>```</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def service_outages(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls outages associated with a service.\n\n    Keys: `['networkEvents', 'aussieOutages', 'currentNbnOutages', 'scheduledNbnOutages', 'resolvedScheduledNbnOutages', 'resolvedNbnOutages']`\n\n    ```\n    \"\"\"\n    url = self.get_url(\"service_outages\", {\"service_id\": service_id})\n    result = AussieBBOutage.parse_obj(self.request_get_json(url=url))\n    return result.dict()\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.service_plans","title":"<code>service_plans(service_id)</code>","text":"<p>Pulls the plan data for a given service. You MUST MFA-verify first.</p> <p>Keys: <code>['current', 'pending', 'available', 'filters', 'typicalEveningSpeeds']</code></p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def service_plans(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"\n    Pulls the plan data for a given service. You MUST MFA-verify first.\n\n    Keys: `['current', 'pending', 'available', 'filters', 'typicalEveningSpeeds']`\n\n    \"\"\"\n    url = self.get_url(\"service_plans\", {\"service_id\": service_id})\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.support_tickets","title":"<code>support_tickets()</code>","text":"<p>Pulls the support tickets associated with the account, returns a list of dicts.</p> <p>Dict keys: <code>['ref', 'create', 'updated', 'service_id', 'type', 'subject', 'status', 'closed', 'awaiting_customer_reply', 'expected_response_minutes']</code></p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def support_tickets(self) -&gt; Dict[str, Any]:\n\"\"\"Pulls the support tickets associated with the account, returns a list of dicts.\n\n    Dict keys: `['ref', 'create', 'updated', 'service_id', 'type', 'subject', 'status', 'closed', 'awaiting_customer_reply', 'expected_response_minutes']`\n\n    \"\"\"\n    url = self.get_url(\"support_tickets\")\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.telephony_usage","title":"<code>telephony_usage(service_id)</code>","text":"<p>Pulls the telephony usage associated with the service.</p> <p>Keys: <code>['national', 'mobile', 'international', 'sms', 'internet', 'voicemail', 'other', 'daysTotal', 'daysRemaining', 'historical']</code></p> <p>Example data:</p> <pre><code>{\"national\":{\"calls\":0,\"cost\":0},\"mobile\":{\"calls\":0,\"cost\":0},\n\"international\":{\"calls\":0,\"cost\":0},\"sms\":{\"calls\":0,\"cost\":0},\n\"internet\":{\"kbytes\":0,\"cost\":0},\n\"voicemail\":{\"calls\":0,\"cost\":0},\"other\":{\"calls\":0,\"cost\":0},\n\"daysTotal\":31,\"daysRemaining\":2,\"historical\":[]}\n</code></pre> Source code in <code>aussiebb/__init__.py</code> <pre><code>def telephony_usage(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Pulls the telephony usage associated with the service.\n\n    Keys: `['national', 'mobile', 'international', 'sms', 'internet', 'voicemail', 'other', 'daysTotal', 'daysRemaining', 'historical']`\n\n    Example data:\n\n    ```\n    {\"national\":{\"calls\":0,\"cost\":0},\"mobile\":{\"calls\":0,\"cost\":0},\n    \"international\":{\"calls\":0,\"cost\":0},\"sms\":{\"calls\":0,\"cost\":0},\n    \"internet\":{\"kbytes\":0,\"cost\":0},\n    \"voicemail\":{\"calls\":0,\"cost\":0},\"other\":{\"calls\":0,\"cost\":0},\n    \"daysTotal\":31,\"daysRemaining\":2,\"historical\":[]}\n    ```\n    \"\"\"\n    url = self.get_url(\"telephony_usage\", {\"service_id\": service_id})\n    return self.request_get_json(url=url)\n</code></pre>"},{"location":"aussiebb/#aussiebb.AussieBB.test_line_state","title":"<code>test_line_state(service_id)</code>","text":"<p>Tests the line state for a given service ID</p> Source code in <code>aussiebb/__init__.py</code> <pre><code>def test_line_state(self, service_id: int) -&gt; Dict[str, Any]:\n\"\"\"Tests the line state for a given service ID\"\"\"\n    tests = self.get_service_tests(service_id)\n    url = self.get_url(\"test_line_state\", {\"service_id\": service_id})\n\n    self.is_valid_test(url, tests)\n\n    self.logger.debug(\"Testing line state, can take a few seconds...\")\n    response = self.request_post(url=url)\n    result: Dict[str, Any] = response.json()\n    return result\n</code></pre>"},{"location":"mfa/","title":"Multi-Factor Authentication","text":"<p>This is a work in progress.</p>"},{"location":"mfa/#requesting-an-mfa-token","title":"Requesting an MFA token","text":"<p>URL: <code>https://myaussie-api.aussiebroadband.com.au/2fa/send</code></p> <p>POST body: <code>{\"method\":\"sms\"}</code> OR <code>{\"method\":\"email\"}</code></p> <p>Headers:</p> <pre><code>{ \"x-two-factor-auth-capable-client\": \"true\" }\n</code></pre>"},{"location":"mfa/#submitting-the-token","title":"Submitting the Token","text":"<p>URL: <code>https://myaussie-api.aussiebroadband.com.au/2fa/verify</code></p> <p>POST body: <code>{\"token\":\"&lt;value&gt;\"}</code></p> <p>Headers:</p> <pre><code>{ \"x-two-factor-auth-capable-client\": \"true\" }\n</code></pre> <p>As far as I can tell this just updates the session/cookies so you're \"approved\" for MFA things after that.</p>"},{"location":"release/","title":"Doing a release","text":"<ol> <li>Commit things</li> <li>Ensure the version's bumped in <code>pyproject.toml</code></li> <li>Do the tag: <code>git tag -a v0.0.10 -m 'Lint all the things'</code></li> <li>Check the tag showed up: <code>git tag</code></li> <li>Check the tag: <code>git show v0.0.10</code></li> <li>Push the tag: <code>git push origin v0.0.10</code></li> <li>Draft a release on Github</li> <li>Publish to pypi: <code>poetry publish</code></li> </ol>"}]}